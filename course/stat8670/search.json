[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "STAT 8670 - Computational Methods in Statistics",
    "section": "",
    "text": "Preface",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#description",
    "href": "index.html#description",
    "title": "STAT 8670 - Computational Methods in Statistics",
    "section": "Description",
    "text": "Description\nTopics ins included are optimization, numerical integration, bootstrapping, cross-validation and Jackknife, density estimation, smoothing, and use of the statistical computer package of S-plus/R.\n\nPrerequisites\nMATH 4752/6752 – Mathematical Statistics II, and the ability to program in a high-level language.\n\n\nInstructor\nChi-Kuang Yeh, I am an Assistant Professor in the Department of Mathematics and Statistics, Georgia State University.\n\nOffice: Suite 1407, 25 Park Place.\nEmail: cyeh@gsu.edu.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#office-hour",
    "href": "index.html#office-hour",
    "title": "STAT 8670 - Computational Methods in Statistics",
    "section": "Office Hour",
    "text": "Office Hour\n[To be announced. By appointment for now]",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#assignment",
    "href": "index.html#assignment",
    "title": "STAT 8670 - Computational Methods in Statistics",
    "section": "Assignment",
    "text": "Assignment\n\nAssignment 1: Date and topics TBA",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#midterm",
    "href": "index.html#midterm",
    "title": "STAT 8670 - Computational Methods in Statistics",
    "section": "Midterm",
    "text": "Midterm\n\nMidterm 1: Date and topics TBA\nMidterm 2: Date and topics TBA",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#final-exam",
    "href": "index.html#final-exam",
    "title": "STAT 8670 - Computational Methods in Statistics",
    "section": "Final Exam",
    "text": "Final Exam\n\nFinal Project: Date and topics TBA",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#topics-and-corresponding-lectures",
    "href": "index.html#topics-and-corresponding-lectures",
    "title": "STAT 8670 - Computational Methods in Statistics",
    "section": "Topics and Corresponding Lectures",
    "text": "Topics and Corresponding Lectures\nThose chapters are based on the lecture notes. This part will be updated frequently.\n\n\n\nTopic\nLecture Covered\n\n\n\n\nIntroduction to R Programming\n1–2\n\n\nOptimization\n3–\n\n\nNumerical integration\nTBA\n\n\nJackknife\nTBA\n\n\nBootstrap\nTBA\n\n\nCross-validation\nTBA\n\n\nSmoothing\nTBA\n\n\nDensity estimation\nTBA\n\n\nMonte Carlo Methods\nTBA",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#recommended-textbooks",
    "href": "index.html#recommended-textbooks",
    "title": "STAT 8670 - Computational Methods in Statistics",
    "section": "Recommended Textbooks",
    "text": "Recommended Textbooks\n\nGivens, G.H. and Hoeting, J.A. (2012). Computational Statistics. Wiley, New York.\nRizzo, M.L. (2007) Statistical Computing with R. CRC Press, Roca Baton.\nHothorn, T. and Everitt, B.S. (2006). A Handbook of Statistical Analyses Using R. CRC Press, Boca Raton.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#side-readings",
    "href": "index.html#side-readings",
    "title": "STAT 8670 - Computational Methods in Statistics",
    "section": "Side Readings",
    "text": "Side Readings\n\nWickham, H., Çetinkaya-Rundel, M. and Grolemund, G. (2023). R for Data Science. O’Reilly.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "01-intro.html",
    "href": "01-intro.html",
    "title": "1  Data Structure and R Programming",
    "section": "",
    "text": "1.1 Data type\nData types, operators, variables\nTwo basic types of objects: (1) data & (2) functions\nday &lt;- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\nweather &lt;- c(\"Raining\", \"Sunny\", NA, \"Windy\", \"Snowing\")\ndata.frame(rbind(day, weather))\n\n             X1      X2        X3       X4      X5\nday      Monday Tuesday Wednesday Thursday  Friday\nweather Raining   Sunny      &lt;NA&gt;    Windy Snowing",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Structure and R Programming</span>"
    ]
  },
  {
    "objectID": "01-intro.html#data-type",
    "href": "01-intro.html#data-type",
    "title": "1  Data Structure and R Programming",
    "section": "",
    "text": "Boolean/Logical: Yes or No, Head or Tail, True or False\nIntegers: Whole numbers \\(\\mathbb{Z}\\), e.g., 1, 2, 3, -1, -2, -3\nCharacters: Text strings, e.g., “Hello”, “World.”\nFloats: Noninteger fractional numbers, e.g., \\(\\pi\\), \\(e\\).\nMissing data: NA in R, which stands for “Not Available.” It is used to represent missing or undefined values in a dataset.\n\n\n\nOther more complex types\n\n\n1.1.1 To change data type\nYou may change the data type using the following functions, but the chance is that some of the information will be missing. Do this with caution!\n\nx &lt;- pi\nprint(x)\n\n[1] 3.141593\n\nx_int &lt;- as.integer(x)\nprint(x_int)\n\n[1] 3\n\n\nSome of the conversion functions:\n\nas.integer(): Convert to integer.\nas.numeric(): Convert to numeric (float).\nas.character(): Convert to character.\nas.logical(): Convert to logical (boolean).\nas.Date(): Convert to date.\nas.factor(): Convert to factor (categorical variable).\nas.list(): Convert to list.\nas.matrix(): Convert to matrix.\nas.data.frame(): Convert to data frame.\nas.vector(): Convert to vector.\nas.complex(): Convert to complex number.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Structure and R Programming</span>"
    ]
  },
  {
    "objectID": "01-intro.html#operators",
    "href": "01-intro.html#operators",
    "title": "1  Data Structure and R Programming",
    "section": "1.2 Operators",
    "text": "1.2 Operators\n\nUnary: With only one argument. E.g., -x (negation), !x (logical negation).\nBinary: With two arguments. E.g., x + y (addition), x - y (subtraction), x * y (multiplication), x / y (division).\n\n\n1.2.1 Comparison Operator\nComparing two objects. E.g., x == y (equal), x != y (not equal), x &lt; y (less than), x &gt; y (greater than), x &lt;= y (less than or equal to), x &gt;= y (greater than or equal to).\n\n\n1.2.2 Logical Operator\nLogical operators are used to combine or manipulate logical values (TRUE or FALSE). E.g., x & y (logical AND), x | y (logical OR), !x (logical NOT).\nWe shall note that the logical operators in R are vectorized, x | y and x || y are different. The former is vectorized, while the latter is not.\nx &lt;- c(TRUE, FALSE, FALSE)\ny &lt;- c(TRUE, FALSE, FALSE)\nx | y  # [1]  TRUE FALSE FALSE\nx || y # This will return an error",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Structure and R Programming</span>"
    ]
  },
  {
    "objectID": "01-intro.html#indexing",
    "href": "01-intro.html#indexing",
    "title": "1  Data Structure and R Programming",
    "section": "1.3 Indexing",
    "text": "1.3 Indexing\nIndexing is a way to access or modify specific elements in a data structure. In R, indexing can be done using square brackets [] for vectors and matrices, or the $ operator for data frames. Note that the index starts from 0 in R, which is different from some other programming languages like Python.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Structure and R Programming</span>"
    ]
  },
  {
    "objectID": "01-intro.html#naming",
    "href": "01-intro.html#naming",
    "title": "1  Data Structure and R Programming",
    "section": "1.4 Naming",
    "text": "1.4 Naming\nIn R, you can assign names to objects using the names() function. This is useful for making your code more readable and for accessing specific elements in a data structure.\nA good practice is to use _ (underscore) to separate words in variable names, e.g., my_variable. This makes the code more readable and easier to understand.\n\n# Assign names to a vector\ntemp &lt;- c(20, 30, 27, 31, 45)\nnames(temp) &lt;- c(\"Mon\", \"Tues\", \"Wed\", \"Thurs\", \"Fri\")\nprint(temp)\n\n  Mon  Tues   Wed Thurs   Fri \n   20    30    27    31    45 \n\n\nrownames(temp) &lt;- \"Day1\" # error\n\ntemp_mat &lt;- matrix(c(20, 30, 27, 31, 45), nrow = 1, ncol = 5)\ncolnames(temp_mat) &lt;- c(\"Mon\", \"Tues\", \"Wed\", \"Thurs\", \"Fri\")\nrownames(temp_mat) &lt;- \"Day1\" # error\nprint(temp_mat)\n\n     Mon Tues Wed Thurs Fri\nDay1  20   30  27    31  45",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Structure and R Programming</span>"
    ]
  },
  {
    "objectID": "01-intro.html#array-and-matrix",
    "href": "01-intro.html#array-and-matrix",
    "title": "1  Data Structure and R Programming",
    "section": "1.5 Array and Matrix",
    "text": "1.5 Array and Matrix\nOne may define an array or a matrix in R using the array() or matrix() functions, respectively. An array is a multi-dimensional data structure, while a matrix is a two-dimensional array.\n\n# Create a 1-dimensional array\narray_1d &lt;- array(1:10, dim = 10)\narray_1d\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n# Create a 2-dimensional array\narray_2d &lt;- array(1:12, dim = c(4, 3))\narray_2d\n\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n\n# Create a 3-dimensional array\narray_3d &lt;- array(1:24, dim = c(4, 3, 2))\narray_3d\n\n, , 1\n\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n\n, , 2\n\n     [,1] [,2] [,3]\n[1,]   13   17   21\n[2,]   14   18   22\n[3,]   15   19   23\n[4,]   16   20   24\n\n# Create a matrix\nmy_matrix &lt;- matrix(1:12, nrow = 4, ncol = 3)\nmy_matrix\n\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n\n\nNote here, the matrix is a special case of an array, where the number of dimensions is exactly 2.\nis.matrix(array_2d)   # TRUE\nis.matrix(my_matrix)  # TRUE\n\nis.array(array_2d)    # TRUE\nis.array(my_matrix)   # TRUE",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Structure and R Programming</span>"
    ]
  },
  {
    "objectID": "01-intro.html#key-and-value-pair",
    "href": "01-intro.html#key-and-value-pair",
    "title": "1  Data Structure and R Programming",
    "section": "1.6 Key and Value Pair",
    "text": "1.6 Key and Value Pair\nKey-Value Pair is a data structure that consists of a key and its corresponding value. In R, this can be implemented using named vectors, lists, or data frames. Usually, the most commonly used case is in the lists and data frames. The values can be extra by providing the corresonding key\n\nkey1 &lt;- \"Tues\"\nvalue1 &lt;- 32\nkey2 &lt;- \"Wed\"\nvalue2 &lt;- 28\n\nlist_temp &lt;- list()\nlist_temp[[ key1 ]] &lt;- value1\nlist_temp[[ key2 ]] &lt;- value2\n\nprint(list_temp)\n\n$Tues\n[1] 32\n\n$Wed\n[1] 28\n\n## Now providing a key - Tues\n### First way\nlist_temp[[\"Tues\"]]\n\n[1] 32\n\n### Second way\nlist_temp$Tues\n\n[1] 32",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Structure and R Programming</span>"
    ]
  },
  {
    "objectID": "01-intro.html#data-frame",
    "href": "01-intro.html#data-frame",
    "title": "1  Data Structure and R Programming",
    "section": "1.7 Data Frame",
    "text": "1.7 Data Frame\nDataframe is a two-dimensional, tabular data structure in R that can hold different types of variables (numeric, character, factor, etc.) in each column. It is similar to a spreadsheet or SQL table.\n\niris &lt;- datasets::iris\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Structure and R Programming</span>"
    ]
  },
  {
    "objectID": "01-intro.html#apply-function",
    "href": "01-intro.html#apply-function",
    "title": "1  Data Structure and R Programming",
    "section": "1.8 Apply function",
    "text": "1.8 Apply function\nThe apply() function is the basic model of the family of apply functions in R, which includes specific functions like lapply(), sapply(), tapply(), mapply(), vapply(), rapply(), bapply(), eapply(), and others. These functions are used to apply a function to elements of a data structure (like a vector, list, or data frame) in a (sometimes) more efficient and concise way than using loops.\n\nx &lt;- cbind(x1 = 3, x2 = c(4:1, 2:5))\ndimnames(x)[[1]] &lt;- letters[1:8]\nprint(x)\n\n  x1 x2\na  3  4\nb  3  3\nc  3  2\nd  3  1\ne  3  2\nf  3  3\ng  3  4\nh  3  5\n\napply(x, MARGIN = 2, mean) #apply the mean function to their \"columns\"\n\nx1 x2 \n 3  3 \n\ncol.sums &lt;- apply(x, MARGIN = 2, sum) #apply the sum function to their \"columns\"\nrow.sums &lt;- apply(x, MARGIN = 1, sum) #apply the sum function to their \"rows\"\nrbind(cbind(x, Rtot = row.sums), Ctot = c(col.sums, sum(col.sums)))\n\n     x1 x2 Rtot\na     3  4    7\nb     3  3    6\nc     3  2    5\nd     3  1    4\ne     3  2    5\nf     3  3    6\ng     3  4    7\nh     3  5    8\nCtot 24 24   48\n\n\nSome of the commonly used apply functions:\n\nlapply: Apply a Function over a List or Vector\nsapply: a user-friendly version and wrapper of lapply by default returning a vector, matrix\nvapply: similar to sapply, but has a pre-specified type of return value, so it can be safer (and sometimes faster) to use.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Structure and R Programming</span>"
    ]
  },
  {
    "objectID": "01-intro.html#tidyverse",
    "href": "01-intro.html#tidyverse",
    "title": "1  Data Structure and R Programming",
    "section": "1.9 Tidyverse",
    "text": "1.9 Tidyverse\nThe tidyverse is a collection of open source packages for the R programming language introduced by Hadley Wickham and his team that “share an underlying design philosophy, grammar, and data structures” of tidy data. Characteristic features of tidyverse packages include extensive use of non-standard evaluation and encouraging piping.\n\n## Load all tidyverse packages\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n## Or load specific packages in the tidy family\nlibrary(dplyr) # Data manipulation\nlibrary(ggplot2) # Data visualization\nlibrary(readr) # Data import\nlibrary(tibble) # Tidy data frames\nlibrary(tidyr) # Data tidying\n# ...",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Structure and R Programming</span>"
    ]
  },
  {
    "objectID": "01-intro.html#pipe",
    "href": "01-intro.html#pipe",
    "title": "1  Data Structure and R Programming",
    "section": "1.10 Pipe",
    "text": "1.10 Pipe\nPipe operator |&gt; (native after R version 4.0) or %&gt;$ (from magrittr package) is a powerful tool in R that allows you to chain together multiple operations in a clear and concise way. It takes the output of one function and passes it as the first argument to the next function.\nFor example, we can write\n\nset.seed(777)\nx &lt;- rnorm(5)\n\n## Without using pipe\nprint(round(mean(x), 2))\n\n[1] 0.37\n\n## Using pipe\nx |&gt; \n  mean() |&gt; # applying the mean function\n  round(2) |&gt; #round to 2nd decimal place\n  print()\n\n[1] 0.37\n\n\nWe can see that, without using the pipe, if we are applying multiple functions to the same object, we may have hard time to track. This can make the code less readable and harder to maintain. On the other hand, using pipe, we can clearly see the sequence of operations being applied to the data, making it easier to understand and modify.\n\n1.10.1 Some rules\n|&gt; should always have a space before it and should typically be the last thing on a line. This simplifies adding new steps, reorganizing existing ones, and modifying elements within each step.\nNote that all of the packages in the tidyverse family support the pipe operator (except ggplot2!), so you can use it with any of them.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Structure and R Programming</span>"
    ]
  },
  {
    "objectID": "01-intro.html#questions-in-class",
    "href": "01-intro.html#questions-in-class",
    "title": "1  Data Structure and R Programming",
    "section": "1.11 Questions in class",
    "text": "1.11 Questions in class\n\n1.11.1 Lecture 1, August 25, 2025\nQ1. If I know Python already, why learn R?\nReply: My general take are 1). R is more specialized for statistical analysis and data visualization, while Python is a more general-purpose programming language. 2). R has a rich ecosystem of packages and libraries specifically designed for statistical computing, making it a popular choice among statisticians and data scientists. 3). R’s syntax and data structures are often more intuitive for statistical tasks, which can lead to faster development and easier collaboration with other statisticians. 4). Also, the tidyverse ecosystem including ggplot and others are a big plus when dealing with big dataframes. 5). They are not meant to replace each other, but work as a complement.\nQ2. Why my installation of R sometimes failed on a Windows machine?\nReply: There are many reasons. One of the most common reasons is that you may need to manually add the path to the environment variable.\n\n\n1.11.2 Lecture 2, August 27, 2025\nQ1. What’s the difference of using apply v.s. looping in R?\nReply: The apply functions are often faster and more efficient than looping, especially for large datasets, because they have done some vectorization under the hood. Also, it has much higher readibility and better conciseness. However, depends on the task, you may want to do the benchmarking to see the performance difference.\nQ2. How to use pipe with two or more variables?\nReply: There are several ways to do this.\n\nWithin the tidyverse family: One way is to use the dplyr package, which provides a set of functions that work well with the pipe operator. For example, you can use the mutate() function to create a new variable based on two existing variables. For example, you can do\n\n\nlibrary(dplyr)\nlibrary(magrittr)  # for %$%\nlibrary(purrr)     # for pmap / exec if needed\n\nmy_df &lt;- tibble(x = 1:5, y = 6:10)\nf  &lt;- function(a, b) a + 2*b\n\nmy_df %&gt;%\n  mutate(z = f(x, y))\n\n# A tibble: 5 × 3\n      x     y     z\n  &lt;int&gt; &lt;int&gt; &lt;dbl&gt;\n1     1     6    13\n2     2     7    16\n3     3     8    19\n4     4     9    22\n5     5    10    25\n\n\n\nUsing base R, you may do something like the following through the magrittr package’s exposition pipe %$%:\n\n\nlibrary(magrittr)\n# method 1\nmy_df %$% f(x, y) \n\n[1] 13 16 19 22 25\n\n# or use . as a placeholder\n# method 2\nmy_df %&gt;% { f(.$x, .$y) }\n\n[1] 13 16 19 22 25\n\n\n\nSome of the materials are adapted from CMU Stat36-350.\nA comprehensive reference for all the tidyverse tools is R for Data Science.\nA comprehensive reference for ggplot2 is ggplot2: Elegant Graphics for Data Analysis.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Structure and R Programming</span>"
    ]
  },
  {
    "objectID": "02-optimization.html",
    "href": "02-optimization.html",
    "title": "2  Optimization",
    "section": "",
    "text": "2.1 Speed comparison\nThe optimization plays an important role in statistical computing, especially in the context of maximum likelihood estimation (MLE) and other statistical inference methods. This chapter will cover various optimization techniques used in statistical computing.\nFor instance, for a linear regression \\[\n  y = X\\boldsymbol{\\beta}+ \\varepsilon.\n\\] From regression class, we know that the (ordinary) least-squares estimation (OLE) for \\(\\boldsymbol{\\beta}\\) is given by \\(\\hat{\\boldsymbol{\\beta}}=(X^\\top X)^{-1} X^\\top y\\). It is convenient as the solution is in the closed-form! However, in the most case, the closed-form solutions will not be available.\nFor GLMs or non-linear regression, we need to do this iterativelly!",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Optimization</span>"
    ]
  },
  {
    "objectID": "02-optimization.html#speed-comparison",
    "href": "02-optimization.html#speed-comparison",
    "title": "2  Optimization",
    "section": "",
    "text": "set.seed(2017-07-13)\nX &lt;- matrix(rnorm(5000 * 100), 5000, 100)\ny &lt;- rnorm(5000)\nlibrary(microbenchmark)\nmicrobenchmark(solve(t(X) %*% X) %*% t(X) %*% y)\nWarning in microbenchmark(solve(t(X) %*% X) %*% t(X) %*% y): less accurate\nnanosecond times to avoid potential integer overflows\nUnit: milliseconds\n                             expr      min       lq     mean   median       uq\n solve(t(X) %*% X) %*% t(X) %*% y 28.57097 29.23575 30.04752 29.87713 30.62448\n      max neval\n 32.21641   100\nmicrobenchmark(solve(t(X) %*% X) %*% t(X) %*% y,\n               solve(crossprod(X), crossprod(X, y)))\nUnit: milliseconds\n                                 expr      min       lq     mean   median\n     solve(t(X) %*% X) %*% t(X) %*% y 28.39886 29.03231 29.73657 29.41512\n solve(crossprod(X), crossprod(X, y)) 24.96937 25.01504 25.25663 25.05457\n       uq      max neval\n 30.23379 32.94231   100\n 25.16457 28.50168   100",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Optimization</span>"
    ]
  },
  {
    "objectID": "02-optimization.html#type-of-optimization-algorithms",
    "href": "02-optimization.html#type-of-optimization-algorithms",
    "title": "2  Optimization",
    "section": "2.2 Type of Optimization Algorithms",
    "text": "2.2 Type of Optimization Algorithms\nThere are in general two types of the optimization algorithms: (1). deterministic and (2). metaheuristic. Deterministic and metaheuristic algorithms represent two distinct paradigms in optimization. Deterministic methods, such as gradient descent, produce the same solution for a given input and follow a predictable path toward an optimum. In contrast, metaheuristic approaches—like genetic algorithms—incorporate randomness and do not guarantee the best possible solution. However, they are often more effective at avoiding local optima and exploring complex search spaces.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Optimization</span>"
    ]
  },
  {
    "objectID": "02-optimization.html#heuristic-algorithms",
    "href": "02-optimization.html#heuristic-algorithms",
    "title": "2  Optimization",
    "section": "2.3 Heuristic Algorithms",
    "text": "2.3 Heuristic Algorithms\nMany of the heuristic algorithms are inspired by the nature, such as the genetic algorithm (GA) and particle swarm optimization (PSO). These algorithms are often used for complex optimization problems where traditional methods may struggle to find a solution. Some of the popular heuristic algorithms include:\n\nGenetic Algorithm (GA)\nParticle Swarm Optimization (PSO)\nSimulated Annealing (SA)\nAnt Colony Optimization (ACO)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Optimization</span>"
    ]
  },
  {
    "objectID": "02-optimization.html#deterministic-algorithms",
    "href": "02-optimization.html#deterministic-algorithms",
    "title": "2  Optimization",
    "section": "2.4 Deterministic Algorithms",
    "text": "2.4 Deterministic Algorithms\nNumerical approximation, what you learned in the mathematical optimization course. Some of the algorithms include:\n\nGradient Descent\nNewton’s Method\nConjugate Gradient Method\nQuasi-Newton Methods (e.g., BFGS)\nInterior Point Methods\n\nThey often reply on the KKT conditions.\n\n2.4.1 In R\noptim() function, nlm() function or mle() function.\n\n\n2.4.2 EM Algorithm\nThe EM (Expectation–Maximization) algorithm is an optimization method that is often applied to find maximum likelihood estimates when data is incomplete or has missing values. It iteratively refines estimates of parameters by alternating between (1) expectation step (E-step) and (2) maximization step (M-step).\n\n\n\n\n\n\nTip with Title\n\n\n\nFor example, consider the function \\(f(x) = x^2\\).\n\n\n\nExample\n\\[\nf(x) = x^2\n\\]\n\n\nExample Theorem\n\n\nExamples are borrowed from the following sources:\n\nPeng, R.D. Advanced Statistical Computing.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Optimization</span>"
    ]
  },
  {
    "objectID": "03-resampling.html",
    "href": "03-resampling.html",
    "title": "3  Resampling, Jackknife and Bootstrap",
    "section": "",
    "text": "3.1 Introduction\nThis chapter covers resampling methods including the jackknife and bootstrap techniques.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Resampling, Jackknife and Bootstrap</span>"
    ]
  },
  {
    "objectID": "03-resampling.html#jackknife",
    "href": "03-resampling.html#jackknife",
    "title": "3  Resampling, Jackknife and Bootstrap",
    "section": "3.2 Jackknife",
    "text": "3.2 Jackknife\nThe jackknife is a resampling technique used to estimate the bias and variance of a statistic.\nJackknife is like a leave-one-out cross-validation. Let \\(\\mathbf{x}= (x_1,\\dots,x_n)\\) be an observed random sample, and denote the \\(i\\)th jackknife sample by \\(\\mathbf{x}_{-i} = (x_1,\\dots,x_{i-1},x_{i+1},\\dots,x_n)\\), that is, a subset of \\(\\mathbf{x}\\).\nFor the parameter of interest \\(\\theta\\), if the statistics is \\(T(\\mathbf{x})=:\\hat{\\theta}\\) is computed on the full\n\n3.2.1 When does jackknife not work?\nJackknife does not work when the function \\(T(\\cdot)\\) is not a smooth functional!",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Resampling, Jackknife and Bootstrap</span>"
    ]
  },
  {
    "objectID": "03-resampling.html#bootstrap",
    "href": "03-resampling.html#bootstrap",
    "title": "3  Resampling, Jackknife and Bootstrap",
    "section": "3.3 Bootstrap",
    "text": "3.3 Bootstrap\nThe bootstrap is a resampling method that allows estimation of the sampling distribution of almost any statistic using random sampling methods.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Resampling, Jackknife and Bootstrap</span>"
    ]
  },
  {
    "objectID": "03-resampling.html#applications",
    "href": "03-resampling.html#applications",
    "title": "3  Resampling, Jackknife and Bootstrap",
    "section": "3.4 Applications",
    "text": "3.4 Applications\nThese methods are widely used in statistical inference and have applications in various fields.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Resampling, Jackknife and Bootstrap</span>"
    ]
  },
  {
    "objectID": "other-topics.html",
    "href": "other-topics.html",
    "title": "4  Additional Topics",
    "section": "",
    "text": "4.1 High-dimensional data\nThis chapter covers additional topics that will only be going over if time permits.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Additional Topics</span>"
    ]
  },
  {
    "objectID": "other-topics.html#dimensional-reduction-methods",
    "href": "other-topics.html#dimensional-reduction-methods",
    "title": "4  Additional Topics",
    "section": "4.2 Dimensional Reduction Methods",
    "text": "4.2 Dimensional Reduction Methods\n\n4.2.1 Principal Component Analysis",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Additional Topics</span>"
    ]
  },
  {
    "objectID": "app-A-intro-R.html",
    "href": "app-A-intro-R.html",
    "title": "5  Appendix: Introduction to R?",
    "section": "",
    "text": "5.1 R\nFor conducting analyses with data sets of hundreds to thousands of observations, calculating by hand is not feasible and you will need a statistical software. R is one of those. R can also be thought of as a high-level programming language. In fact, R is one of the top languages to be used by data analysts and data scientists. There are a lot of analysis packages in R that are currently developed and maintained by researchers around the world to deal with different data problems. Most importantly, R is free! In this section, we will learn how to use R to conduct basic statistical analyses.",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Appendix: Introduction to R?</span>"
    ]
  },
  {
    "objectID": "app-A-intro-R.html#ide",
    "href": "app-A-intro-R.html#ide",
    "title": "5  Appendix: Introduction to R?",
    "section": "5.2 IDE",
    "text": "5.2 IDE\n\n5.2.1 Rstudio\nRStudio is an integrated development environment (IDE) designed specifically for working with the R programming language. It provides a user-friendly interface that includes a source editor, console, environment pane, and tools for plotting, debugging, version control, and package management. RStudio supports both R and Python and is widely used for data analysis, statistical modeling, and reproducible research. It also integrates seamlessly with tools like R Markdown, Shiny, and Quarto, making it popular among data scientists, statisticians, and educators.\n\n\n5.2.2 Visual Studio Code (VS Code)\nVS Code is a versatile code editor that supports multiple programming languages, including R. With the R extension for VS Code, users can write and execute R code, access R’s console, and utilize features like syntax highlighting, code completion, and debugging. While not as specialized as RStudio for R development, VS Code offers a lightweight alternative with extensive customization options and support for various programming tasks.\n\n\n5.2.3 Positron\nPositron IDE is the next-generation integrated development environment developed by Posit, the company behind RStudio. Designed to be a modern, extensible, and language-agnostic IDE, Positron builds on the strengths of RStudio while supporting a broader range of languages and workflows, including R, Python, and Quarto.",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Appendix: Introduction to R?</span>"
    ]
  },
  {
    "objectID": "app-A-intro-R.html#rstudio-layout",
    "href": "app-A-intro-R.html#rstudio-layout",
    "title": "5  Appendix: Introduction to R?",
    "section": "5.3 RStudio Layout",
    "text": "5.3 RStudio Layout\nRStudio consists of several panes: - Source: Where you write scripts and markdown documents. - Console: Where you type and execute R commands. - Environment/History: Shows your variables and command history. - Files/Plots/Packages/Help/Viewer: For file management, viewing plots, managing packages, accessing help, and viewing web content.",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Appendix: Introduction to R?</span>"
    ]
  },
  {
    "objectID": "app-A-intro-R.html#r-scripts",
    "href": "app-A-intro-R.html#r-scripts",
    "title": "5  Appendix: Introduction to R?",
    "section": "5.4 R Scripts",
    "text": "5.4 R Scripts\nR scripts are plain text files containing R code. You can create a new script in RStudio by clicking File &gt; New File &gt; R Script.",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Appendix: Introduction to R?</span>"
    ]
  },
  {
    "objectID": "app-A-intro-R.html#r-help",
    "href": "app-A-intro-R.html#r-help",
    "title": "5  Appendix: Introduction to R?",
    "section": "5.5 R Help",
    "text": "5.5 R Help\nUse ?function_name or help(function_name) to access help for any R function. For example:\n?mean\nhelp(mean)",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Appendix: Introduction to R?</span>"
    ]
  },
  {
    "objectID": "app-A-intro-R.html#r-packages",
    "href": "app-A-intro-R.html#r-packages",
    "title": "5  Appendix: Introduction to R?",
    "section": "5.6 R Packages",
    "text": "5.6 R Packages\nPackages extend R’s functionality. There are thousands of packages available in R ecosystem. You may install them from different sources.\n\n5.6.1 With Comprehensive R Archive Network (CRAN)\nCRAN is the primary repository for R packages. It contains thousands of packages that can be easily installed and updated.\nInstall a package with:\ninstall.packages(\"package_name\")\n\n\n5.6.2 With Bioconductor\nBioconductor is a repository for bioinformatics packages in R. It provides tools for the analysis and comprehension of high-throughput genomic data.\nInstall Bioconductor packages using the BiocManager package:\nBiocManager::install(\"package_name\")\n\n\n5.6.3 From GitHub\nMany of the authors of R packages host their work on GitHub. You can install these packages using the devtools package:\ndevtools::install_github(\"username/package_name\")\n\n\n5.6.4 Load a package\nOnce a package is installed, you need to load it into your R session to use its functions:\nlibrary(package_name)\nAlternatively, you may use a function in the package with package_name::function_name() without loading the entire package.",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Appendix: Introduction to R?</span>"
    ]
  },
  {
    "objectID": "app-A-intro-R.html#r-markdown",
    "href": "app-A-intro-R.html#r-markdown",
    "title": "5  Appendix: Introduction to R?",
    "section": "5.7 R Markdown",
    "text": "5.7 R Markdown\nR Markdown allows you to combine text, code, and output in a single document. Create a new R Markdown file in RStudio via File &gt; New File &gt; R Markdown....\nRecently, the posit team has developed a new version of the R Markdown called quarto document, with the file extension .qmd. It is still under rapid development.",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Appendix: Introduction to R?</span>"
    ]
  },
  {
    "objectID": "app-A-intro-R.html#vectors",
    "href": "app-A-intro-R.html#vectors",
    "title": "5  Appendix: Introduction to R?",
    "section": "5.8 Vectors",
    "text": "5.8 Vectors\nVectors are the most basic data structure in R.\n\nx &lt;- c(1, 2, 3, 4, 5)\nx\n\n[1] 1 2 3 4 5\n\n\nYou can perform operations on vectors:\n\nx * 2\n\n[1]  2  4  6  8 10",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Appendix: Introduction to R?</span>"
    ]
  },
  {
    "objectID": "app-A-intro-R.html#data-sets",
    "href": "app-A-intro-R.html#data-sets",
    "title": "5  Appendix: Introduction to R?",
    "section": "5.9 Data Sets",
    "text": "5.9 Data Sets\nData frames are used for storing data tables. Create a data frame:\n\ndf &lt;- data.frame(Name = c(\"Alice\", \"Bob\"), Score = c(90, 85))\ndf\n\n   Name Score\n1 Alice    90\n2   Bob    85\n\n\nYou can import data from files using read.csv() or read.table().\n\nThis appendix is adapted from Why R?.",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Appendix: Introduction to R?</span>"
    ]
  }
]