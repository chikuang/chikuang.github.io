[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "STAT 8670 - Computational Methods in Statistics",
    "section": "",
    "text": "Preface",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#description",
    "href": "index.html#description",
    "title": "STAT 8670 - Computational Methods in Statistics",
    "section": "Description",
    "text": "Description\nTopics included are optimization, numerical integration, bootstrapping, cross-validation and Jackknife, density estimation, smoothing, and use of the statistical computer package of S-plus/R.\n\nPrerequisites\nMATH 4752/6752 – Mathematical Statistics II, and the ability to program in a high-level language.\n\n\nInstructor\nChi-Kuang Yeh, I am a postdoctoral scholar at the Department of Statistics and Actuarial Science, McGill University.\n\nOffice: 1216 Burnside Hall.\nEmail: chi-kuang.yeh@mail.mcgill.ca.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#office-hour",
    "href": "index.html#office-hour",
    "title": "STAT 8670 - Computational Methods in Statistics",
    "section": "Office Hour",
    "text": "Office Hour\n[By appointment and a online link will be provided later]",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#assignment",
    "href": "index.html#assignment",
    "title": "STAT 8670 - Computational Methods in Statistics",
    "section": "Assignment",
    "text": "Assignment\n\nAssignment 1: Date and topics TBA",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#midterm",
    "href": "index.html#midterm",
    "title": "STAT 8670 - Computational Methods in Statistics",
    "section": "Midterm",
    "text": "Midterm\n\nMidterm 1: Date and topics TBA",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#topics-and-corresponding-lectures",
    "href": "index.html#topics-and-corresponding-lectures",
    "title": "STAT 8670 - Computational Methods in Statistics",
    "section": "Topics and Corresponding Lectures",
    "text": "Topics and Corresponding Lectures\nThose chapters are based on the lecture notes. This part will be updated frequently.\n\n\n\n\n\n\n\nTopic\nLecture Covered\n\n\n\n\nOptimization\nTBA\n\n\nNumerical integration\nTBA\n\n\nJackknife\nTBA\n\n\nBootstrap\nTBA\n\n\nCross-validation\nTBA\n\n\nSmoothing\nTBA\n\n\nDensity estimation\nTBA\n\n\nMonte Carlo Methods\nTBA",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#recommended-textbooks",
    "href": "index.html#recommended-textbooks",
    "title": "STAT 8670 - Computational Methods in Statistics",
    "section": "Recommended Textbooks",
    "text": "Recommended Textbooks\n\nGivens, G.H. and Hoeting, J.A. (2012). Computational Statistics. Wiley, New York.\nRizzo, M.L. (2007) Statistical Computing with R. CRC Press, Roca Baton.\nHothorn, T. and Everitt, B.S. (2006). A Handbook of Statistical Analyses Using R. CRC Press, Boca Raton.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#side-readings",
    "href": "index.html#side-readings",
    "title": "STAT 8670 - Computational Methods in Statistics",
    "section": "Side Readings",
    "text": "Side Readings\n\nWickham, H., Çetinkaya-Rundel, M. and Grolemund, G. (2023). R for Data Science. O’Reilly.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "01-intro.html",
    "href": "01-intro.html",
    "title": "1  Data Structure and R Programming",
    "section": "",
    "text": "1.1 Data type\nData types, operators, variables\nTwo basic types of objects: (1) data & (2) functions\nday &lt;- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\nweather &lt;- c(\"Raining\", \"Sunny\", NA, \"Windy\", \"Snowing\")\ndata.frame(rbind(day, weather))\n\n             X1      X2        X3       X4      X5\nday      Monday Tuesday Wednesday Thursday  Friday\nweather Raining   Sunny      &lt;NA&gt;    Windy Snowing",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Structure and R Programming</span>"
    ]
  },
  {
    "objectID": "01-intro.html#data-type",
    "href": "01-intro.html#data-type",
    "title": "1  Data Structure and R Programming",
    "section": "",
    "text": "Boolean/Logical: Yes or No, Head or Tail, True or False\nIntegers: Whole numbers \\(\\mathbb{Z}\\), e.g., 1, 2, 3, -1, -2, -3\nCharacters: Text strings, e.g., “Hello”, “World.”\nFloats: Noninteger fractional numbers, e.g., \\(\\pi\\), \\(e\\).\nMissing data: NA in R, which stands for “Not Available.” It is used to represent missing or undefined values in a dataset.\n\n\n\nOther more complex types\n\n\n1.1.1 To change data type\nYou may change the data type using the following functions, but the chance is that some of the information will be missing. Do this with caution!\n\nx &lt;- pi\nprint(x)\n\n[1] 3.141593\n\nx_int &lt;- as.integer(x)\nprint(x_int)\n\n[1] 3\n\n\nSome of the conversion functions:\n\nas.integer(): Convert to integer.\nas.numeric(): Convert to numeric (float).\nas.character(): Convert to character.\nas.logical(): Convert to logical (boolean).\nas.Date(): Convert to date.\nas.factor(): Convert to factor (categorical variable).\nas.list(): Convert to list.\nas.matrix(): Convert to matrix.\nas.data.frame(): Convert to data frame.\nas.vector(): Convert to vector.\nas.complex(): Convert to complex number.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Structure and R Programming</span>"
    ]
  },
  {
    "objectID": "01-intro.html#operators",
    "href": "01-intro.html#operators",
    "title": "1  Data Structure and R Programming",
    "section": "1.2 Operators",
    "text": "1.2 Operators\n\nUnary: With only one argument. E.g., -x (negation), !x (logical negation).\nBinary: With two arguments. E.g., x + y (addition), x - y (subtraction), x * y (multiplication), x / y (division).\n\n\n1.2.1 Comparison Operator\nComparing two objects. E.g., x == y (equal), x != y (not equal), x &lt; y (less than), x &gt; y (greater than), x &lt;= y (less than or equal to), x &gt;= y (greater than or equal to).\n\n\n1.2.2 Logical Operator\nLogical operators are used to combine or manipulate logical values (TRUE or FALSE). E.g., x & y (logical AND), x | y (logical OR), !x (logical NOT).\nWe shall note that the logical operators in R are vectorized, x | y and x || y are different. The former is vectorized, while the latter is not.\nx &lt;- c(TRUE, FALSE, FALSE)\ny &lt;- c(TRUE, FALSE, FALSE)\nx | y  # [1]  TRUE FALSE FALSE\nx || y # This will return an error",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Structure and R Programming</span>"
    ]
  },
  {
    "objectID": "01-intro.html#indexing",
    "href": "01-intro.html#indexing",
    "title": "1  Data Structure and R Programming",
    "section": "1.3 Indexing",
    "text": "1.3 Indexing\nIndexing is a way to access or modify specific elements in a data structure. In R, indexing can be done using square brackets [] for vectors and matrices, or the $ operator for data frames. Note that the index starts from 0 in R, which is different from some other programming languages like Python.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Structure and R Programming</span>"
    ]
  },
  {
    "objectID": "01-intro.html#naming",
    "href": "01-intro.html#naming",
    "title": "1  Data Structure and R Programming",
    "section": "1.4 Naming",
    "text": "1.4 Naming",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Structure and R Programming</span>"
    ]
  },
  {
    "objectID": "01-intro.html#arrray-and-matrix",
    "href": "01-intro.html#arrray-and-matrix",
    "title": "1  Data Structure and R Programming",
    "section": "1.5 Arrray and Matrix",
    "text": "1.5 Arrray and Matrix",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Structure and R Programming</span>"
    ]
  },
  {
    "objectID": "01-intro.html#key-and-value-pair",
    "href": "01-intro.html#key-and-value-pair",
    "title": "1  Data Structure and R Programming",
    "section": "1.6 Key and Value Pair",
    "text": "1.6 Key and Value Pair",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Structure and R Programming</span>"
    ]
  },
  {
    "objectID": "01-intro.html#data-frame",
    "href": "01-intro.html#data-frame",
    "title": "1  Data Structure and R Programming",
    "section": "1.7 Data Frame",
    "text": "1.7 Data Frame\nDataframe is a two-dimensional, tabular data structure in R that can hold different types of variables (numeric, character, factor, etc.) in each column. It is similar to a spreadsheet or SQL table.\n\niris &lt;- datasets::iris\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Structure and R Programming</span>"
    ]
  },
  {
    "objectID": "01-intro.html#tidyverse",
    "href": "01-intro.html#tidyverse",
    "title": "1  Data Structure and R Programming",
    "section": "1.8 Tidyverse",
    "text": "1.8 Tidyverse\nThe tidyverse is a collection of open source packages for the R programming language introduced by Hadley Wickham and his team that “share an underlying design philosophy, grammar, and data structures” of tidy data. Characteristic features of tidyverse packages include extensive use of non-standard evaluation and encouraging piping.\n## Load all tidyverse packages\nlibrary(tidyverse)\n\n## Or load specific packages in the tidy family\nlibrary(dplyr) # Data manipulation\nlibrary(ggplot2) # Data visualization\nlibrary(readr) # Data import\nlibrary(tibble) # Tidy data frames\nlibrary(tidyr) # Data tidying\n# ...\n\nSome of the materials are adapted from CMU Stat36-350.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Structure and R Programming</span>"
    ]
  },
  {
    "objectID": "02-optimization.html",
    "href": "02-optimization.html",
    "title": "2  Optimization",
    "section": "",
    "text": "2.1 Speed comparison\nThe optimization plays an important role in statistical computing, especially in the context of maximum likelihood estimation (MLE) and other statistical inference methods. This chapter will cover various optimization techniques used in statistical computing.\nFor instance, for a linear regression \\[\n  y = X\\boldsymbol{\\beta}+ \\varepsilon.\n\\] From regression class, we know that the (ordinary) least-squares estimation (OLE) for \\(\\boldsymbol{\\beta}\\) is given by \\(\\hat{\\boldsymbol{\\beta}}=(X^\\top X)^{-1} X^\\top y\\). It is convenient as the solution is in the closed-form! However, in the most case, the closed-form solutions will not be available.\nFor GLMs or non-linear regression, we need to do this iterativelly!",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Optimization</span>"
    ]
  },
  {
    "objectID": "02-optimization.html#speed-comparison",
    "href": "02-optimization.html#speed-comparison",
    "title": "2  Optimization",
    "section": "",
    "text": "set.seed(2017-07-13)\nX &lt;- matrix(rnorm(5000 * 100), 5000, 100)\ny &lt;- rnorm(5000)\nlibrary(microbenchmark)\nmicrobenchmark(solve(t(X) %*% X) %*% t(X) %*% y)\nWarning in microbenchmark(solve(t(X) %*% X) %*% t(X) %*% y): less accurate\nnanosecond times to avoid potential integer overflows\nUnit: milliseconds\n                             expr      min       lq     mean   median       uq\n solve(t(X) %*% X) %*% t(X) %*% y 28.57097 29.23575 30.04752 29.87713 30.62448\n      max neval\n 32.21641   100\nmicrobenchmark(solve(t(X) %*% X) %*% t(X) %*% y,\n               solve(crossprod(X), crossprod(X, y)))\nUnit: milliseconds\n                                 expr      min       lq     mean   median\n     solve(t(X) %*% X) %*% t(X) %*% y 28.39886 29.03231 29.73657 29.41512\n solve(crossprod(X), crossprod(X, y)) 24.96937 25.01504 25.25663 25.05457\n       uq      max neval\n 30.23379 32.94231   100\n 25.16457 28.50168   100",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Optimization</span>"
    ]
  },
  {
    "objectID": "02-optimization.html#type-of-optimization-algorithms",
    "href": "02-optimization.html#type-of-optimization-algorithms",
    "title": "2  Optimization",
    "section": "2.2 Type of Optimization Algorithms",
    "text": "2.2 Type of Optimization Algorithms\nThere are in general two types of the optimization algorithms: (1). deterministic and (2). metaheuristic. Deterministic and metaheuristic algorithms represent two distinct paradigms in optimization. Deterministic methods, such as gradient descent, produce the same solution for a given input and follow a predictable path toward an optimum. In contrast, metaheuristic approaches—like genetic algorithms—incorporate randomness and do not guarantee the best possible solution. However, they are often more effective at avoiding local optima and exploring complex search spaces.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Optimization</span>"
    ]
  },
  {
    "objectID": "02-optimization.html#heuristic-algorithms",
    "href": "02-optimization.html#heuristic-algorithms",
    "title": "2  Optimization",
    "section": "2.3 Heuristic Algorithms",
    "text": "2.3 Heuristic Algorithms\nMany of the heuristic algorithms are inspired by the nature, such as the genetic algorithm (GA) and particle swarm optimization (PSO). These algorithms are often used for complex optimization problems where traditional methods may struggle to find a solution. Some of the popular heuristic algorithms include:\n\nGenetic Algorithm (GA)\nParticle Swarm Optimization (PSO)\nSimulated Annealing (SA)\nAnt Colony Optimization (ACO)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Optimization</span>"
    ]
  },
  {
    "objectID": "02-optimization.html#deterministic-algorithms",
    "href": "02-optimization.html#deterministic-algorithms",
    "title": "2  Optimization",
    "section": "2.4 Deterministic Algorithms",
    "text": "2.4 Deterministic Algorithms\nNumerical approximation, what you learned in the mathmeatical optimization course. Some of the algorithms include:\n\nGradient Descent\nNewton’s Method\nConjugate Gradient Method\nQuasi-Newton Methods (e.g., BFGS)\nInterior Point Methods\n\nThey often reply on the KKT conditions.\n\nExamples are borrowed from the following sources:\n\nPeng, R.D. Advanced Statistical Computing.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Optimization</span>"
    ]
  },
  {
    "objectID": "03-resampling.html",
    "href": "03-resampling.html",
    "title": "3  Resampling, Jackknife and Bootstrap",
    "section": "",
    "text": "3.1 Introduction\nThis chapter covers resampling methods including the jackknife and bootstrap techniques.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Resampling, Jackknife and Bootstrap</span>"
    ]
  },
  {
    "objectID": "03-resampling.html#jackknife",
    "href": "03-resampling.html#jackknife",
    "title": "3  Resampling, Jackknife and Bootstrap",
    "section": "3.2 Jackknife",
    "text": "3.2 Jackknife\nThe jackknife is a resampling technique used to estimate the bias and variance of a statistic.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Resampling, Jackknife and Bootstrap</span>"
    ]
  },
  {
    "objectID": "03-resampling.html#bootstrap",
    "href": "03-resampling.html#bootstrap",
    "title": "3  Resampling, Jackknife and Bootstrap",
    "section": "3.3 Bootstrap",
    "text": "3.3 Bootstrap\nThe bootstrap is a resampling method that allows estimation of the sampling distribution of almost any statistic using random sampling methods.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Resampling, Jackknife and Bootstrap</span>"
    ]
  },
  {
    "objectID": "03-resampling.html#applications",
    "href": "03-resampling.html#applications",
    "title": "3  Resampling, Jackknife and Bootstrap",
    "section": "3.4 Applications",
    "text": "3.4 Applications\nThese methods are widely used in statistical inference and have applications in various fields.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Resampling, Jackknife and Bootstrap</span>"
    ]
  },
  {
    "objectID": "app-A-intro-R.html",
    "href": "app-A-intro-R.html",
    "title": "4  Appendix: Introduction to R?",
    "section": "",
    "text": "4.1 R\nFor conducting analyses with data sets of hundreds to thousands of observations, calculating by hand is not feasible and you will need a statistical software. R is one of those. R can also be thought of as a high-level programming language. In fact, R is one of the top languages to be used by data analysts and data scientists. There are a lot of analysis packages in R that are currently developed and maintained by researchers around the world to deal with different data problems. Most importantly, R is free! In this section, we will learn how to use R to conduct basic statistical analyses.",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Appendix: Introduction to R?</span>"
    ]
  },
  {
    "objectID": "app-A-intro-R.html#ide",
    "href": "app-A-intro-R.html#ide",
    "title": "4  Appendix: Introduction to R?",
    "section": "4.2 IDE",
    "text": "4.2 IDE\n\n4.2.1 Rstudio\nRStudio is an integrated development environment (IDE) designed specifically for working with the R programming language. It provides a user-friendly interface that includes a source editor, console, environment pane, and tools for plotting, debugging, version control, and package management. RStudio supports both R and Python and is widely used for data analysis, statistical modeling, and reproducible research. It also integrates seamlessly with tools like R Markdown, Shiny, and Quarto, making it popular among data scientists, statisticians, and educators.\n\n\n4.2.2 Visual Studio Code (VS Code)\nVS Code is a versatile code editor that supports multiple programming languages, including R. With the R extension for VS Code, users can write and execute R code, access R’s console, and utilize features like syntax highlighting, code completion, and debugging. While not as specialized as RStudio for R development, VS Code offers a lightweight alternative with extensive customization options and support for various programming tasks.\n\n\n4.2.3 Positron\nPositron IDE is the next-generation integrated development environment developed by Posit, the company behind RStudio. Designed to be a modern, extensible, and language-agnostic IDE, Positron builds on the strengths of RStudio while supporting a broader range of languages and workflows, including R, Python, and Quarto.",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Appendix: Introduction to R?</span>"
    ]
  },
  {
    "objectID": "app-A-intro-R.html#rstudio-layout",
    "href": "app-A-intro-R.html#rstudio-layout",
    "title": "4  Appendix: Introduction to R?",
    "section": "4.3 RStudio Layout",
    "text": "4.3 RStudio Layout\nRStudio consists of several panes: - Source: Where you write scripts and markdown documents. - Console: Where you type and execute R commands. - Environment/History: Shows your variables and command history. - Files/Plots/Packages/Help/Viewer: For file management, viewing plots, managing packages, accessing help, and viewing web content.",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Appendix: Introduction to R?</span>"
    ]
  },
  {
    "objectID": "app-A-intro-R.html#r-scripts",
    "href": "app-A-intro-R.html#r-scripts",
    "title": "4  Appendix: Introduction to R?",
    "section": "4.4 R Scripts",
    "text": "4.4 R Scripts\nR scripts are plain text files containing R code. You can create a new script in RStudio by clicking File &gt; New File &gt; R Script.",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Appendix: Introduction to R?</span>"
    ]
  },
  {
    "objectID": "app-A-intro-R.html#r-help",
    "href": "app-A-intro-R.html#r-help",
    "title": "4  Appendix: Introduction to R?",
    "section": "4.5 R Help",
    "text": "4.5 R Help\nUse ?function_name or help(function_name) to access help for any R function. For example:\n?mean\nhelp(mean)",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Appendix: Introduction to R?</span>"
    ]
  },
  {
    "objectID": "app-A-intro-R.html#r-packages",
    "href": "app-A-intro-R.html#r-packages",
    "title": "4  Appendix: Introduction to R?",
    "section": "4.6 R Packages",
    "text": "4.6 R Packages\nPackages extend R’s functionality. Install a package with:\ninstall.packages(\"package_name\")\nLoad a package with:\nlibrary(package_name)",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Appendix: Introduction to R?</span>"
    ]
  },
  {
    "objectID": "app-A-intro-R.html#r-markdown",
    "href": "app-A-intro-R.html#r-markdown",
    "title": "4  Appendix: Introduction to R?",
    "section": "4.7 R Markdown",
    "text": "4.7 R Markdown\nR Markdown allows you to combine text, code, and output in a single document. Create a new R Markdown file in RStudio via File &gt; New File &gt; R Markdown....\nRecently, the posit team has developed a new version of the R Markdown called quarto document, with the file extension .qmd. It is still under rapid development.",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Appendix: Introduction to R?</span>"
    ]
  },
  {
    "objectID": "app-A-intro-R.html#vectors",
    "href": "app-A-intro-R.html#vectors",
    "title": "4  Appendix: Introduction to R?",
    "section": "4.8 Vectors",
    "text": "4.8 Vectors\nVectors are the most basic data structure in R.\n\nx &lt;- c(1, 2, 3, 4, 5)\nx\n\n[1] 1 2 3 4 5\n\n\nYou can perform operations on vectors:\n\nx * 2\n\n[1]  2  4  6  8 10",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Appendix: Introduction to R?</span>"
    ]
  },
  {
    "objectID": "app-A-intro-R.html#data-sets",
    "href": "app-A-intro-R.html#data-sets",
    "title": "4  Appendix: Introduction to R?",
    "section": "4.9 Data Sets",
    "text": "4.9 Data Sets\nData frames are used for storing data tables. Create a data frame:\n\ndf &lt;- data.frame(Name = c(\"Alice\", \"Bob\"), Score = c(90, 85))\ndf\n\n   Name Score\n1 Alice    90\n2   Bob    85\n\n\nYou can import data from files using read.csv() or read.table().\n\nThis appendix is adapted from Why R?.",
    "crumbs": [
      "Appendix",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Appendix: Introduction to R?</span>"
    ]
  }
]